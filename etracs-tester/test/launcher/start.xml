<?xml version="1.0" encoding="UTF-8"?>
<project name="launcher" default="start" basedir=".">
    
    <target name="init">
        <property file="conf.properties"/>
        
        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
            <classpath>
                <pathelement location="../../lib/ant-contrib-0.6.jar"/>
            </classpath>
        </taskdef> 
        <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy">
            <classpath>
                <pathelement location="${platform.libs.dir}/client/groovy-all-1.5.5.jar"/>
                <pathelement location="${platform.libs.dir}/client/rameses-common2.jar"/>
            </classpath> 
        </taskdef> 

        <groovy>
        <![CDATA[
            def modulename = properties['lgu.type'];
            if (!modulename) {
                modulename = 'municipality';
                properties['lgu.type'] = modulename;
            } else if (modulename == 'remote') {
                modulename = properties['remote.type']; 
            } 

            def conffile = new java.io.File(properties['basedir'] +'/modules/'+ modulename +'/conf.properties'); 
            if (conffile.exists()) { 
                ant.property(file: conffile.absolutePath); 
                ant.property(name: 'setup.conf.path', value: conffile.absolutePath)
            } else { 
                throw new Exception(conffile.absolutePath + ' does not exist'); 
            }  

            //ant.echoproperties();
        ]]>
        </groovy>
    </target>
    
    <target name="build" depends="init, -build-osiris3-server, -build-app, -build-web, -build-updates" description="Build server"></target>
    
    <target name="run-server" depends="init" description="Run server">
        <exec executable="cmd" dir="${target.server.dir}/bin">
            <arg value="/c"/>
            <arg value="run.bat"/>
        </exec>
    </target>

    <target name="start" depends="build, run-server" description="Build and run server"></target>
    
    <target name="-build-osiris3-server">    
        <delete dir="${target.server.dir}/bin" failonerror="false"/> 
        <delete dir="${target.server.dir}/lib" failonerror="false"/> 

        <copy todir="${target.server.dir}/bin" overwrite="true">
            <fileset dir="${osiris3.server.dir}/bin"/>
        </copy>
        <copy todir="${target.server.dir}/bin" overwrite="true" file="${basedir}/settings/server.conf"/> 

        <copy todir="${target.server.dir}/lib" overwrite="true">
            <fileset dir="${osiris3.server.dir}/lib"/>
        </copy>
        <copy todir="${target.server.dir}/lib" overwrite="true">
            <fileset dir="${platform.libs.dir}/server" includes="*.jar"/>
        </copy>

        <delete dir="${target.services.dir}/datasources" failonerror="false"/> 
        <copy todir="${target.services.dir}/datasources" overwrite="true">
            <fileset dir="${basedir}/datasources"/> 
        </copy>

        <groovy>
        <![CDATA[ 
            def target_server_dir = properties['target.server.dir']; 
            def parseExpression = {str-> 
                if (!str) return '';

                properties.each{k,v-> 
                    str = str.replaceAll('\\$\\{'+ k +'\\}', v);  
                }
                return str; 
            } 

            ant.echo '';
            ant.echo 'Build server.conf ...';
            ant.loadfile(srcfile: target_server_dir+'/bin/server.conf', property:'server.conf'); 
            ant.echo(
                message: parseExpression(project.getProperty('server.conf')), 
                file: target_server_dir+'/bin/server.conf'
            ); 

            def scanner = ant.fileScanner{
                fileset(dir: properties['target.services.dir'] + '/datasources') 
            }
            for (file in scanner) {
                def fileid = 'datasources/' + file.name;
                ant.echo 'Parsing ' + fileid + ' ...';
                ant.loadfile(srcfile: file, property: fileid);
                ant.echo(file: file, message: parseExpression(project.getProperty(fileid))); 
            } 

            ant.echo 'Build shared services ...';
            ant.delete(dir: properties['target.services.dir'] +'/shared/v25/modules', failonerror:false);            
            def shared_service_names = properties['shared.services']; 
            if (shared_service_names) { 
                shared_service_names.split(':').each{ssn-> 
                    ant.copy(todir: properties['target.services.dir'] +'/shared/v25/modules/'+ ssn, overwrite:true){
                        fileset(dir: properties['projects.dir'] + '/server/' + ssn) 
                    }
                } 
            } 
        ]]> 
        </groovy> 
    </target> 

    <target name="-build-app">  
        <delete dir="${target.app.dir}" failonerror="false"/> 
        <copy todir="${target.app.dir}/adapters" overwrite="true">
            <fileset dir="${basedir}/adapters"/>
        </copy>        
        <copy todir="${target.app.dir}/connections" overwrite="true">
            <fileset dir="${basedir}/connections"/>
        </copy>
        <copy todir="${target.app.dir}" overwrite="true" file="${basedir}/settings/app.conf"/> 

        <groovy>
        <![CDATA[ 
            def target_app_dir = properties['target.app.dir']; 
            def parseExpression = {str-> 
                if (!str) return '';

                properties.each{k,v-> 
                    str = str.replaceAll('\\$\\{'+ k +'\\}', v);  
                }
                return str; 
            } 

            ant.echo '';
            def scanner = ant.fileScanner{
                fileset(dir: target_app_dir + '/adapters') 
            }
            for (file in scanner) {
                def fileid = 'adapters/' + file.name;
                ant.echo 'Parsing ' + fileid + ' ...';
                ant.loadfile(srcfile: file, property: fileid);
                ant.echo(file: file, message: parseExpression(project.getProperty(fileid))); 
            } 

            scanner = ant.fileScanner{
                fileset(dir: target_app_dir + '/connections') 
            }
            for (file in scanner) {
                def fileid = 'connections/' + file.name;
                ant.echo 'Parsing ' + fileid + ' ...';
                ant.loadfile(srcfile: file, property: fileid);
                ant.echo(file: file, message: parseExpression(project.getProperty(fileid))); 
            } 

            ant.echo 'Parsing app.conf ...';
            ant.loadfile(srcfile: target_app_dir + '/app.conf', property: 'app.conf');
            ant.echo(file: target_app_dir + '/app.conf', message: parseExpression(project.getProperty('app.conf'))); 

            ant.echo 'Build '+ properties['target.app.name'] +' services ...';
            def app_modules = properties['app.modules']; 
            if (app_modules) { 
                app_modules.split(':').each{ssn-> 
                    ant.copy(todir: target_app_dir +'/modules/'+ ssn, overwrite:true){
                        fileset(dir: properties['projects.dir'] + '/server/' + ssn) 
                    } 
                } 
            } 
        ]]> 
        </groovy> 
    </target> 

    <target name="-build-web"> 
        <groovy>
        <![CDATA[ 
            def osiris3_server_dir = properties['osiris3.server.dir'];         
            def target_web_dir = properties['target.web.dir']; 
            def platforms_dir = properties['platforms.dir']; 
            def projects_dir = properties['projects.dir']; 
            def basedir = properties['basedir']; 
            def parseExpression = {str-> 
                if (!str) return '';

                properties.each{k,v-> 
                    str = str.replaceAll('\\$\\{'+ k +'\\}', v);  
                }
                return str; 
            } 

            ant.echo '';
            ant.echo 'Parsing anubis.hosts ...'; 
            ant.copy(todir: target_web_dir, file: basedir+'/settings/anubis.hosts', overwrite:true); 
            ant.loadfile(srcfile: target_web_dir+'/anubis.hosts', property: 'anubis.hosts'); 
            ant.echo(file: target_web_dir+'/anubis.hosts', message: parseExpression(project.getProperty('anubis.hosts'))); 

            ant.echo 'Build web platforms ...'; 
            ant.delete(dir: target_web_dir+'/etracs', failonerror:false); 
            ant.copy(todir: target_web_dir+'/etracs', overwrite:true){
                fileset(dir: projects_dir + '/web/etracs')
            }

            ant.echo 'Build download core modules ...'; 
            def download_modules_dir = target_web_dir + '/resources/downloads/modules';
            ant.delete(dir: download_modules_dir, failonerror:false); 

            def modules = properties['download.core.modules']; 
            if (modules) { 
                modules.split(':').each{ssn-> 
                    ant.echo 'Copying ' + ssn + ' ...';
                    ant.copy( 
                        overwrite: true,  
                        todir: download_modules_dir +'/core', 
                        file: properties['platform.libs.dir'] +'/client/'+ ssn 
                    ) 
                } 
            } 

            ant.echo 'Build download shared modules ...'; 
            modules = properties['download.shared.modules']; 
            if (modules) { 
                modules.split(':').each{ssn-> 
                    ant.echo 'Copying ' + ssn + ' ...';
                    ant.copy( 
                        overwrite: true,  
                        todir: download_modules_dir +'/shared', 
                        file: properties['projects.dir'] +'/client/'+ ssn +'/dist/'+ ssn +'.jar' 
                    ) 
                } 
            } 

            ant.echo 'Build download app modules ...'; 
            modules = properties['download.app.modules']; 
            if (modules) { 
                modules.split(':').each{ssn-> 
                    ant.echo 'Copying ' + ssn + ' ...';
                    ant.copy( 
                        overwrite: true,
                        todir: download_modules_dir, 
                        file: properties['projects.dir'] +'/client/'+ ssn +'/dist/'+ ssn +'.jar' 
                    ) 
                } 
            } 
        ]]> 
        </groovy> 
    </target> 
    
    <target name="-build-updates">
        <groovy>
        <![CDATA[ 
            ant.echo 'Generating updates.xml ...';
            def parseExpression = {str-> 
                if (!str) return '';

                properties.each{k,v-> 
                    str = str.replaceAll('\\$\\{'+ k +'\\}', v);  
                }
                return str; 
            } 

            def osiris3_server_dir = properties['osiris3.server.dir']; 
            def target_web_dir = properties['target.web.dir']; 
            def basedir = properties['basedir']; 
            def download_modules_dir = target_web_dir + '/resources/downloads/modules';
            def buffer = new StringBuilder();
            buffer.append('\n\t<modules>'); 
            [
                [name:'download.core.modules', title:'core libraries', prefix:'core/'],
                [name:'download.shared.modules', title:'shared libraries', prefix:'shared/'],
                [name:'download.app.modules', title:'main app libraries']
            ].each{item-> 
                def sval = properties[item.name];
                if (sval == null) return;
                if (!item.prefix) item.prefix='';

                buffer.append('\n ');
                buffer.append('\n\t\t<!-- '+item.title+' -->');
                sval.split(':').each{ 
                    def arr = it.split(','); 
                    def jarname = arr[0];
                    if (!jarname) return;
                    if (!jarname.endsWith('.jar')) {
                        jarname = jarname+'.jar';
                    } 
                    def jarver = (arr.length > 1? arr[1]: '1.0'); 
                    buffer.append('\n\t\t<module file="'+item.prefix+jarname+'" version="'+jarver+'"/>');
                } 
            } 
            buffer.append('\n\t</modules>'); 

            ant.loadfile(srcfile: basedir +'/settings/updates.xml', property:'updates.xml'); 
            def updates_xml = parseExpression(project.getProperty('updates.xml')); 
            updates_xml = updates_xml.replaceAll('\\$\\{updates.modules\\}', buffer.toString());
            ant.echo(message: updates_xml, file:download_modules_dir +'/updates.xml'); 
        ]]> 
        </groovy> 
    </target> 
        
</project>
