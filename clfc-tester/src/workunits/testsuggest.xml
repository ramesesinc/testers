<workunit extends="workunits/templateform.xml"> 
    <invokers>
        <invoker folderid="/menu/test" caption="Test Suggest"/>
    </invokers>
    
    <code>
    <![CDATA[ 
    import com.rameses.rcp.common.*;
    import com.rameses.rcp.annotations.*;
    import com.rameses.osiris2.client.*;
    import com.rameses.osiris2.common.*;
    
    class TestSuggestController 
    {        
        @Binding
        def binding;

        def entity = [:];
        
        def suggestlist = [
            [name:'flores, worgie a'],
            [name:'nazareno, elmo a'],
            [name:'zamora, jessie a'],
            [name:'retiza, arnel a'],
            [name:'louie, carl a'],
            [name:'van halen, eddie a'],
            [name:'murphy, eddie a'],
            [name:'espinosa, louisito a'],
            [name:'berto, andre a'],
            [name:'vai, steve a'],
            [name:'johnson, eric a'],
            [name:'darrel, dimebag a']
        ];
        
        def suggestHandler = [
            fetchList: {params->                 
                if (params.searchtext == null) return suggestlist;

                return suggestlist.findAll {
                    def txt1 = it.name.toLowerCase();
                    def txt2 = params.searchtext.toLowerCase();
                    return (txt1.indexOf(txt2) >= 0);
                };
            },
            onselect: {o-> 
                println 'suggesthandler onselect...' + o;
            },
            xonempty: {
                println 'suggesthandler onempty...';
            } 
        ] as SuggestModel 
        
        def suggestHandler2 = [
            fetchList: {params->                 
                if (params.searchtext == null) return suggestlist;

                return suggestlist.findAll {
                    def txt1 = it.name.toLowerCase();
                    def txt2 = params.searchtext.toLowerCase();
                    return (txt1.indexOf(txt2) >= 0);
                };
            },
            onselect: {o-> 
                println 'suggesthandler2 onselect...' + o;
                entity.relative = o;
            },
            onempty: {
                println 'suggesthandler2 onempty...';
                entity.relative = null; 
            } 
        ] as SuggestModel         
        
        void doTest() {
            println entity;
        } 
        
        
        def messagelist = [
            [text: 'The quick brown fox jumps over the lazy dog. ']
        ]; 
    }
    ]]>
    </code>
    
    <pages>
        <page template="test.text.TestSuggestPage"/> 
    </pages>
</workunit>
